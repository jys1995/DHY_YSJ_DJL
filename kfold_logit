install.packages("caTools")
library(caTools)

data  <- read.csv("breast-cancer-wisconsin(diagnostic).csv", TRUE)

kfold_logit <- function(tt){
  # number of cross validation
  k       <- 5
  
  # fix the seed so that each model train and test the same data
  set.seed(2) 
  
  # each data has its own id(1 to 5) to process k fold cross validation 
  data$id <- sample(1:k, nrow(data), replace = TRUE)
  
  list    <- 1:k
  
  # data frame reset
  prediction_logit <- testset_copy_logit <- data.frame()
  
  #function for k fold
  for(i in 1:k){
    
    # remove rows with id i from dataframe to create training set
    # select rows with id i to create test set
    trainset     <- subset(data, id %in% list[-i])
    testset      <- subset(data, id %in% c(i))
    
    #run a adaboost model
    #model_lotit        <- basic_adaboost(trainset[, independent], trainset[, dependent], n_rounds = tt)
    
    model_logit        <- LogitBoost(trainset[, 1:30], trainset[, 31], nIter = tt)
    
    #temp_logit         <- as.data.frame(predict(model_bm, testset))
    temp_logit         <- as.data.frame(predict(model_logit, testset))
    
    # append this iteration's prediction to the end of the prediction data frame
    prediction_logit   <- rbind(prediction_logit, temp_logit)
    
    # append this iteration's test set to the testset copy data frame
    testset_copy_logit <- rbind(testset_copy_logit, as.data.frame(testset[, 31]))
    
    # add predictions and actual Sepal Length values
    result_logit            <- cbind(prediction_logit, testset_copy_logit[, 1])
    
    names(result_logit)     <- c("Actual", "Predicted")
    
    confusion_matrix_logit  <- table(result_logit$Actual, result_logit$Predicted )
    
    accuracy_logit          <- sum(diag(confusion_matrix_logit)) / sum(confusion_matrix_logit)
    
    result_logit           <- list("confusion_matrix_logit " = confusion_matrix_logit, 
                                   "accuracy_logit"          = accuracy_logit)
    
  }  
  
  temp1 <<- (result_logit$accuracy_logit)
  
  return(temp1)
}

tt<- list()

for (i in 1:100){
  print(kfold_logit(i))
  tt <<- append(tt, kfold_logit(i), after = length(tt))
  
}

print(mean(unlist(tt)))
